[
    {
        "name": "blockworks__parse_latest_news",
        "description": "Parse HTML content to extract news article information.\n\nReturns: list: List of dictionaries containing article information with keys:\n        - headline: Article headline text\n        - description: Article description or summary\n        - metadata: Article timestamp in datetime format\n        - url: Full URL to the article\n        - thumbnail: URL of the article's thumbnail image (currently not implemented)",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "HTML content of the news page"
                }
            },
            "required": [
                "content"
            ],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "blockworks__get_latest_news",
        "description": "Fetch the latest news articles from Blockworks.\n\nReturns: list: List of dictionaries containing article information, limited to topk items",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "topk": {
                    "type": "number",
                    "description": "Maximum number of articles to return. Defaults to 20"
                }
            },
            "required": [],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "blockworks__get_page_content",
        "description": "Fetch page content using Playwright browser automation with scroll support.\n\nThis method handles infinite scroll pagination by simulating mouse wheel\nevents to load more content. It includes delays between scrolls to allow\nfor content loading.\n\nReturns: str: HTML content of the page after scrolling\n\nRaises:\n    Exception: Any error that occurs during page fetching or scrolling",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL to fetch content from"
                }
            },
            "required": [
                "url"
            ],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "theblock__parse_latest_news",
        "description": "Parse HTML content to extract news article information.\n\nReturns: list: List of dictionaries containing article information with keys:\n        - headline: Article headline text\n        - metadata: Article metadata (author, date, etc.)\n        - url: Full URL to the article\n        - thumbnail: URL of the article's thumbnail image",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "HTML content of the news page"
                }
            },
            "required": [
                "content"
            ],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "theblock__get_latest_news",
        "description": "Fetch the latest news articles from TheBlock.\n\nReturns: list: List of dictionaries containing article information",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "topk": {
                    "type": "number",
                    "description": "Number of articles to fetch. Defaults to 20"
                }
            },
            "required": [],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "theblock__get_page_content",
        "description": "Fetch page content using Playwright browser automation.\n\nReturns: str: HTML content of the page\n\nRaises:\n    Exception: Any error that occurs during page fetching",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL to fetch content from"
                }
            },
            "required": [
                "url"
            ],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "twitterclient__post_tweet",
        "description": "Post a new tweet.\n\nReturns: Dict: A dictionary containing tweet information with full engagement metrics,\n        text content, and metadata\n\nRaises:\n    Exception: If tweet posting fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string",
                    "description": "Content of the tweet to post"
                }
            },
            "required": [
                "text"
            ],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "twitterclient__reply_to_tweet",
        "description": "Reply to an existing tweet.\n\nReturns: Dict: A dictionary containing tweet information with full engagement metrics,\n        text content, and metadata\n\nRaises:\n    Exception: If reply posting fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "tweet_id": {
                    "type": "string",
                    "description": "ID of the tweet to reply to"
                },
                "text": {
                    "type": "string",
                    "description": "Content of the reply tweet"
                }
            },
            "required": [
                "tweet_id",
                "text"
            ],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "twitterclient__quote_tweet",
        "description": "Quote an existing tweet with additional text.\n\nReturns: Dict: A dictionary containing tweet information with full engagement metrics,\n        text content, and metadata including the quoted tweet\n\nRaises:\n    Exception: If quote tweet posting fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "tweet_id": {
                    "type": "string",
                    "description": "ID of the tweet to quote"
                },
                "text": {
                    "type": "string",
                    "description": "Text to add to the quote tweet"
                }
            },
            "required": [
                "tweet_id",
                "text"
            ],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "twitterclient__search_tweets",
        "description": "Search for tweets matching a query.\n\nReturns: List[Dict]: List of tweets with full metadata and engagement metrics\n\nRaises:\n    Exception: If search operation fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "Search query string"
                },
                "tweet_type": {
                    "type": "string",
                    "description": "Type of tweets to search ('Latest' or 'Top')"
                },
                "limit": {
                    "type": "number",
                    "description": "Maximum number of tweets to return"
                }
            },
            "required": [
                "query"
            ],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "twitterclient__get_user_tweets",
        "description": "Get recent tweets from a specific user.\n\nReturns: List[Dict]: List of tweets with full metadata and engagement metrics\n\nRaises:\n    Exception: If fetching tweets fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string",
                    "description": "Twitter user ID"
                },
                "tweet_type": {
                    "type": "string",
                    "description": "Type of tweets to fetch ('Tweets', 'Replies', etc.)"
                },
                "limit": {
                    "type": "number",
                    "description": "Maximum number of tweets to return"
                }
            },
            "required": [
                "user_id"
            ],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "twitterclient__get_trends",
        "description": "Get current trending topics on Twitter.\n\nReturns: List[Dict]: List of trending topics with format:\n    {\n        'name': str,\n        'tweet_count': int\n    }\n\nRaises:\n    Exception: If fetching trends fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {},
            "required": [],
            "additionalProperties": false
        },
        "async": true
    }
]