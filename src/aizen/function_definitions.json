[
    {
        "name": "blockworks__parse_latest_news",
        "description": "Parse HTML content to extract news article information.\n\nReturns: list: List of dictionaries containing article information with keys:\n        - headline: Article headline text\n        - description: Article description or summary\n        - metadata: Article timestamp in datetime format\n        - url: Full URL to the article\n        - thumbnail: URL of the article's thumbnail image (currently not implemented)",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "HTML content of the news page"
                }
            },
            "required": ["content"],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "blockworks__get_latest_news",
        "description": "Fetch the latest news articles from Blockworks.\n\nReturns: list: List of dictionaries containing article information, limited to topk items",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "topk": {
                    "type": "number",
                    "description": "Maximum number of articles to return. Defaults to 20"
                }
            },
            "required": [],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "blockworks__get_page_content",
        "description": "Fetch page content using Playwright browser automation with scroll support.\n\nThis method handles infinite scroll pagination by simulating mouse wheel\nevents to load more content. It includes delays between scrolls to allow\nfor content loading.\n\nReturns: str: HTML content of the page after scrolling\n\nRaises:\n    Exception: Any error that occurs during page fetching or scrolling",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL to fetch content from"
                }
            },
            "required": ["url"],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "theblock__parse_latest_news",
        "description": "Parse HTML content to extract news article information.\n\nReturns: list: List of dictionaries containing article information with keys:\n        - headline: Article headline text\n        - metadata: Article metadata (author, date, etc.)\n        - url: Full URL to the article\n        - thumbnail: URL of the article's thumbnail image",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "HTML content of the news page"
                }
            },
            "required": ["content"],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "theblock__get_latest_news",
        "description": "Fetch the latest news articles from TheBlock.\n\nReturns: list: List of dictionaries containing article information",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "topk": {
                    "type": "number",
                    "description": "Number of articles to fetch. Defaults to 20"
                }
            },
            "required": [],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "theblock__get_page_content",
        "description": "Fetch page content using Playwright browser automation.\n\nReturns: str: HTML content of the page\n\nRaises:\n    Exception: Any error that occurs during page fetching",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL to fetch content from"
                }
            },
            "required": ["url"],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "twitterclient___async_init",
        "description": "Async initialization for the client.\n\nReturns: ",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {},
            "required": [],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "twitterclient__post_tweet",
        "description": "Post a new tweet.\n\nReturns: Dict: A dictionary containing tweet information with full engagement metrics,\n        text content, and metadata\n\nRaises:\n    Exception: If tweet posting fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string",
                    "description": "Content of the tweet to post"
                }
            },
            "required": ["text"],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "twitterclient__reply_to_tweet",
        "description": "Reply to an existing tweet.\n\nReturns: Dict: A dictionary containing tweet information with full engagement metrics,\n        text content, and metadata\n\nRaises:\n    Exception: If reply posting fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "tweet_id": {
                    "type": "string",
                    "description": "ID of the tweet to reply to"
                },
                "text": {
                    "type": "string",
                    "description": "Content of the reply tweet"
                }
            },
            "required": ["tweet_id", "text"],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "twitterclient__quote_tweet",
        "description": "Quote an existing tweet with additional text.\n\nReturns: Dict: A dictionary containing tweet information with full engagement metrics,\n        text content, and metadata including the quoted tweet\n\nRaises:\n    Exception: If quote tweet posting fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "tweet_id": {
                    "type": "string",
                    "description": "ID of the tweet to quote"
                },
                "username": {
                    "type": "string",
                    "description": "Twitter username of the original tweet author"
                },
                "text": {
                    "type": "string",
                    "description": "Text to add to the quote tweet"
                }
            },
            "required": ["tweet_id", "text"],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "twitterclient__search_tweets",
        "description": "Search for tweets matching a query.\n\nReturns: List[Dict]: List of tweets with full metadata and engagement metrics\n\nRaises:\n    Exception: If search operation fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "Search query string"
                },
                "tweet_type": {
                    "type": "string",
                    "description": "Type of tweets to search ('Latest' or 'Top')"
                },
                "limit": {
                    "type": "number",
                    "description": "Maximum number of tweets to return"
                }
            },
            "required": ["query"],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "twitterclient__get_user_tweets",
        "description": "Get recent tweets from a specific user.\n\nReturns: List[Dict]: List of tweets with full metadata and engagement metrics\n\nRaises:\n    Exception: If fetching tweets fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string",
                    "description": "Twitter user ID"
                },
                "tweet_type": {
                    "type": "string",
                    "description": "Type of tweets to fetch ('Tweets', 'Replies', etc.)"
                },
                "limit": {
                    "type": "number",
                    "description": "Maximum number of tweets to return"
                }
            },
            "required": ["user_id"],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "twitterclient__get_trends",
        "description": "Get current trending topics on Twitter.\n\nReturns: List[Dict]: List of trending topics with format:\n    {\n        'name': str,\n        'tweet_count': int\n    }\n\nRaises:\n    Exception: If fetching trends fails",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {},
            "required": [],
            "additionalProperties": false
        },
        "async": true
    },
    {
        "name": "bscclient__get_balance",
        "description": "Get BNB balance for address.\n\nReturns: user BNB balance",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                }
            },
            "required": [],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "bscclient__transfer",
        "description": "Transfer BNB to address. The amount should be in human-readable decimal format (e.g. 0.001 for 0.001 BNB) - the function will handle conversion to token base units internally.\n\nReturns: Transaction hash",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "to_address": {
                    "type": "string",
                    "description": "Recipient address"
                },
                "amount": {
                    "type": "number",
                    "description": "Amount in BNB in human-readable decimal format (e.g. 0.001 for 0.001 BNB). Will be converted to base units internally based on token decimals."
                }
            },
            "required": ["to_address", "amount"],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "bscclient__get_token_balance",
        "description": "Get ERC20 token balance.\n\nReturns: ",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "token_address": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                }
            },
            "required": ["token_address"],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "bscclient__transfer_token",
        "description": "Transfer ERC20 tokens on Binance Smart Chain. The amount should be in human-readable decimal format (e.g. 0.001 for 0.001 USDT) - the function will handle conversion to token base units internally.\n\nReturns: Transaction hash",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "token_address": {
                    "type": "string",
                    "description": "Token contract address"
                },
                "to_address": {
                    "type": "string",
                    "description": "Recipient address"
                },
                "amount": {
                    "type": "number",
                    "description": "Amount of tokens in human-readable decimal format (e.g. 0.001 for 0.001 USDT). Will be converted to base units internally based on token decimals."
                }
            },
            "required": ["token_address", "to_address", "amount"],
            "additionalProperties": false
        },
        "async": false
    },
    {
        "name": "bscclient__swap_v2",
        "description": "Swap tokens. The amount should be in human-readable decimal format (e.g. 0.001 for 0.001 USDT) - the function will handle conversion to token base units internally.\n\nReturns: Transaction hash",
        "strict": false,
        "parameters": {
            "type": "object",
            "properties": {
                "from_token_symbol": {
                    "type": "string",
                    "description": "Symbol of token to swap from."
                },
                "to_token_symbol": {
                    "type": "string",
                    "description": "Symbol of token to swap to"
                },
                "amount": {
                    "type": "number",
                    "description": "Amount of tokens in human-readable decimal format (e.g. 0.001 for 0.001 USDT). Will be converted to base units internally based on token decimals."
                },
                "slippage": {
                    "type": "number",
                    "description": "Slippage tolerance percent"
                }
            },
            "required": ["from_token_symbol", "to_token_symbol", "amount"],
            "additionalProperties": false
        },
        "async": false
    }
]
